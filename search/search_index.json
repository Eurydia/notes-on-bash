{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bash","text":""},{"location":"basic-shell-features/","title":"Basic shell features","text":"<p>Summarized from Basic shell features.</p>"},{"location":"basic-shell-features/#syntax","title":"Syntax","text":"<p>When given an input, a shell tokenizes it into words and operators. Then, it parses the tokens into commands and other constructs. The commands are executed and their exit statuses are returned.</p> <p>If the shell encounters the beginning of a comment (#), the hsell ignores the hashtag symbol and the rest of that line.</p>"},{"location":"basic-shell-features/#shell-operation","title":"Shell operation","text":"<p>More specifially, a shell performs the following steps; (1) reads input from a file or from the terminal, (2) breaks input into tokens, which consists of words and symbols. These tokens are separated at a metacharacter, (3) parses the tokens into commands. (4) Performs the shell expansions, (5) performs redirections and removes the redirection operators and their operands from the argument list, (6) executes the commands, (7) waits and collects the commands' exit statuses.</p>"},{"location":"basic-shell-features/#quoting","title":"Quoting","text":"<p>Quoting removes the special meaning of characters, such as metacharacters, and operators.</p> <p>There are three quoting mechanisms: the escape character, single quotes, and double quotes.</p>"},{"location":"basic-shell-features/#escape-character","title":"Escape character","text":"<p>A non-quoted backslash (\\) is the Bash escape character. It preserves the literal value of the next character that follows, with the exception of newline.</p> <p>When a newline is escaped, it is removed from the input, and the two lines are joined together.</p>"},{"location":"basic-shell-features/#single-quotes","title":"Single quotes","text":"<p>Characters placed between a pair of single quotes (') loses all of their special meaning. As such a single quote cannot appear in a single-quoted string, even when preceded by a backslash</p>"},{"location":"basic-shell-features/#double-quotes","title":"Double quotes","text":"<p>Characters placed between a pair of double quotes (\") loses their special meaning, with the exception of $, `, \\, and, when history expansion is enabled, !.</p> <p>The characters * and @ have special meaning when in double quotes.</p> <p>The backslash retains its special meaning only when followed by one of the following characters: $, `, \", \\, or newline. Backslashes preceding characters without a special meaning do not do anything. Within double quotes, backslashes that are followed by one of these characters are removed.</p> <p>A double quote may be quoted within double quotes by escaping it.</p>"},{"location":"basic-shell-features/#ansi-c-quoting","title":"ANSI-C quoting","text":"<p>Prefixing a single-quoted string with a dollar sign ($), such as $'Hi', triggers a special kind of single-quoted string. Additional escapable characters are as per specified by ANSI-C standard. These are:</p> <p>\\a</p> <p>alert (bell)</p> <p>\\b</p> <p>backspace</p> <p>\\e and \\E</p> <p>an escape character (not ANSI C)</p> <p>\\f</p> <p>form feed</p> <p>\\n</p> <p>newline</p> <p>\\r</p> <p>carriage return</p> <p>\\t</p> <p>horizontal tab</p> <p>\\v</p> <p>vertical tab</p> <p>\\\\</p> <p>backslash</p> <p>\\'</p> <p>single quote</p> <p>\\\"</p> <p>double quote</p> <p>\\?</p> <p>question mark</p> <p>\\nnn</p> <p>the eight-bit character whose value is the octal value nnn (one to three octal digits)</p> <p>\\xHH</p> <p>the eight-bit character whose value is the hexadecimal value HH (one or two hex digits)</p> <p>\\uHHHH</p> <p>the Unicode (ISO/IEC 10646) character whose value is the hexadecimal value HHHH (one to four hex digits)</p> <p>\\UHHHHHHHH</p> <p>the Unicode (ISO/IEC 10646) character whose value is the hexadecimal value HHHHHHHH (one to eight hex digits)</p> <p>\\cx</p> <p>a control-x character</p>"},{"location":"basic-shell-features/#locale-specific-translation","title":"Locale-specific translation","text":"<p>Prefixing a double-quoted string with a dollar sign ($), such as $\"Hello, world\", translates it according to the current locale.</p>"},{"location":"basic-shell-features/#comments","title":"Comments","text":"<p>The start of a comment is marked by the hashtag symbol (#). In a non-interactive shell or an interactive shell with interactive_comments enabled, when the start of a comment is encountered, the hashtag symbol along with the rest of the line is ignored.</p> <p>Comments are not allowed in an interactive shell with interactive_comments disabled.</p>"},{"location":"basic-shell-features/#shell-commands","title":"Shell commands","text":"<p>A simple command consists of the command itself, followed by a sequence of space-separated arguments. While a complex command consists of simple commands and other constructs, such as pipelines, loops, or conditions.</p>"},{"location":"basic-shell-features/#reserved-words","title":"Reserved words","text":"<p>When unquoted, the following words have special meanings:</p> <pre><code>if    then  elif    else    fi        time\nfor   in    until   while   do        done\ncase  esac  coproc  select  function\n{     }     [[      !       ]]\n</code></pre> <p>There are a few honorary reserved keywords, which carry special meaning only in some cases. in is treated as a reserved keyword when present as the third word in a case or a select command. And in and do are treated as reserved keywords when present as the third word in a for command.</p>"},{"location":"definitions/","title":"Definitions","text":"<p>Summarized from Definitions</p> <p>control operator</p> <p>A sequence of symbol or a token that has special meaning. It is a newline or one of the following: ||, &amp;&amp;, &amp;, ;, ;;, ;&amp;, ;;&amp;, |, |&amp;, (, or ).</p> <p>exit status and return status</p> <p>The value returned by a command to its caller. The value is restricted to eight bits from 0 to 255.</p> <p>field</p> <p>The name of a command being executed or its arguments.</p> <p>job</p> <p>A set of processes comprising a pipeline, and any processes descended from it, that are all in the same process group.</p> <p>job control</p> <p>A mechanism by which users can selectively stop (suspend) and restart (resume) execution of processes.</p> <p>metacharacter</p> <p>A single symbol delimits fields or word. A metacharacter is a space, tab, newline, or one of the following characters: |, &amp;, ;, (, ), &lt;, or &gt;.</p> <p>operator</p> <p>A control operator or a redirection operator. Operators contain at least one unquoted metacharacter.</p> <p>process group</p> <p>A collection of related processes each having the same process group ID.</p> <p>process group ID</p> <p>A unique identifier that represents a process group during its lifetime.</p> <p>signal</p> <p>A mechanism by which a process may be notified by the kernel of an event occurring in the system.</p> <p>token</p> <p>A sequence of characters considered a single unit by the shell. It is either a word or an operator.</p> <p>word</p> <p>A sequence of characters treated as a unit by the shell. Words may not include unquoted metacharacters.</p>"},{"location":"introduction/","title":"Introduction","text":""},{"location":"introduction/#what-is-bash","title":"What is Bash?","text":"<p>Summarized from What is Bash?.</p> <p>Bash is the default shell for the GNU operating system. Its name is an acronym which stands for \"Bourne-again Shell.\" It is a direct successor to the sh shell of the Unix operating system developed by Stephen Bourne.</p> <p>The GNU operating system has more than one shell, but Bash remains the default.</p>"},{"location":"introduction/#what-is-a-shell","title":"What is a shell?","text":"<p>Summarized from What is a shell?.</p> <p>In general, a shell is responsible for executing commands on an operating system.</p> <p>A Unix shell serves two purpose; (1) as a command interpreter, it connects the users to the operating system and provides command-line interface, (2) as a programming language, it enables the execution of complex commands that would not make sense to execute on the command-line interface.</p> <p>A shell has two modes; (1) in interactive mode, it reads input from the keyboard, and (2) in non-interactive mode, it reads input from a file.</p> <p>A shell command may be executed synchronously or asynchronously.</p>"}]}